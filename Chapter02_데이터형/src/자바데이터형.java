/*
 * 		2023-09-12
 * 		1. 목표
 * 			= 데이터형 (메모리 공간의 크기)
 * 			= 변수 / 상수
 * 			= 연산자 (가공)
 * 			-------------- 제어문 / 객체지향 / 예외처리 / 클래스의 종류 / 재사용(is-a, has-a)
 * 		1) 프로그램의 기본
 * 			= 데이터 저장하는 방법
 * 			= 데이터를 한개만 저장 : 변수 / 상수 / 리터럴:실제 저장할 값
 * 								----메모리 저장 공간의 별칭
 * 									-----주소 (0~...)
 * 			- 자바의 메모리 구조
 * 			----------------------------
 * 			method 영역 => method, static
 * 			----------------------------
 * 			stack => 지역변수, 매개변수 ==> 메모리 자체 관리 (블럭이 끝나면 사라지는)
 * 			----------------------------
 * 			heap => 클래스 블록 ==> 사용자가 관리 (자동 메모리 회수 : 가비지 컬렉션)
 * 			----------------------------
 * 
 * 			프로그램 => 데이터 관리 (Vue, React => 데이터 관리) - 변환속도가 빠름
 * 			
 * 			실제 메모리 (RAM) => 휘발성 => 프로그램이 종료되면 저장되지 않은 메모리 사라짐
 *  
 * 			  100을 저장
 * 			0----------   * 메모리는 밑에 보다시피 4byte씩 나눠짐 - 속도가 빠르려면? 4byte가 디폴트기 때문에 4byte로 저장하면 빠름 (ex- int(정수))
 * 			  사용중
 * 			4----------
 * 			  사용중
 * 			8----------
 * 			   100 ==> 이름 부여 : a => 변수 
 * 			12----------
 * 
 * 			16----------
 *   
 * 			20----------
 * 				---
 * 				---
 * 			메모리 크기 => 속도
 * 
 * 		=> 자바에서 제공하는 메모리 크기 (자료형, 데이터형)
 * 			-정수
 * 			 byte  => 1byte(8bit) => 0,1을 8개 저장하는 공간
 * 			----------------------------------
 * 			부호	ㅣ 1	ㅣ 1	ㅣ 1	ㅣ 1	ㅣ 1	ㅣ 1	ㅣ 1	
 * 			----------------------------------
 * 			 ㅣ 
 * 			양수(0)/음수(1) - 앞에 0 or 1 따라 양수 or 음수
 * 			01111111 => 127 => 1byte(8bit)는 127까지 표현가능 - 자바는 음수도 표현하기때문에 -128~127 범위이다 0~255 아님!
 * 			음수의 경우, 2의보수 + 1 해서 - => -128까지 표현 가능
 * 			합친다면 -128 ~ 127 까지 표현가능
 *		=> 주로 사용처
 *			파일 읽기 / 파일 쓰기 / 업로드 / 다운로드시 사용 			
 * 			------------
 * 			 short => 2byte(16bit) => C언어 호환성
 * 					  => 사용 빈도가 거의 없다
 * 					  -32768 ~ 32767
 *  
 * 			 int   => 4byte => 일반적인 모든 숫자는 int
 * 							=> default
 * 			 long  => 8byte(64bit)
 * 					  빅데이터 / 금융권
 * 			L(1) => 100L(long) 100(int)
 * 			----------------------------------------	
 * 			실수
 * 				float : 4byte
 * 				double : 8byte => default
 * 				10.5(double), 10.5F(float)
 * 				 ----------------10.5d(double) d는 생략가능
 * 			문자
 * 				char => 2byte(멀티 바이트)
 * 				-------------------------
 * 				1byte(아스키), 2byte(Unicode)
 * 							 ---------------	
 * 					ㅣ				ㅣ
 * 				 C/C++ 			   자바 
 * 				=> 범위(0~256)	  (0~65536)
 * 				=> 한글(자음+모음)		=> 한글자당 2byte => UTF-8	 / UTF-8 설정안하면 한글깨짐
 * 
 * 			논리 : boolean (1byte) => true/false
 * 				  => 조건문
 *  		-----------------------------------------
 * 				논리형 boolean => true/false
 * 			-----------------------------------------
 * 				정수 byte (1byte) ==> (127 초과하면 에러 발생)
 * 								 -128~127 
 * 					int  (4byte) ==> -21억4천 ~ 21억4천
 * 					long (8byte) ==> L(1)
 * 			-----------------------------------------
 * 				실수 float  (4byte) => 10.5F(f)
 * 							=> 소수점 이하 6자리
 * 					double (8byte) => 10.5 ==> default
 * 							=> 소수점 이하 15자리
 * 			-----------------------------------------
 * 				문자형 char (2byte) => 0~65536
 * 							=> 한개의 문자만 사용이 가능 'A', '홍'
 * 						=> 정수형 (글자마다 번호)
 * 						=> A => 65, a => 97
 * 						=> 연산처리 => 정수형으로 자동 변환
 * 						=> 'A' + 1
 * 						   ---
 * 							65 + 1 => 66
 * 			-----------------------------------------
 * 				참조형(사용자 정의) : 배열, 클래스
 * 			-----------------------------------------			
 * 			=> 자바 : 대소문자 구분, 명령이 끝나면 ;
 */
public class 자바데이터형 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println('A'+1);

		short a = 32767;
		System.out.println(a);
	}

}
