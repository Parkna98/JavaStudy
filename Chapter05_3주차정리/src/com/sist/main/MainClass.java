package com.sist.main;
/*
 * 		1. 객체지향 프로그램
 * 		---------------
 * 			클래스 => 만드는 목적
 * 			1) 재사용이 가능
 * 				= 상속 => 기존의 클래스를 변경해서 사용할 목적
 * 					class GenieMusic
 * 					=> class Melon extends GenieMusic
 * 							--------------- 기존의 클래스를 확장
 * 				= 포함 => 기존의 클래스를 그대로 사용
 * 					class Melon
 * 					{
 * 						GenieMusic gm=new GenieMusic();
 * 					}
 * 					
 * 			2) 데이터 보호 => 캡슐화
 * 				=> 접근지정어 : private => 클래스에서 사용하는 멤버변수는 은닉화 
 * 										=> 메소드에서 기능을 제작해서 접근
 * 											---------------------
 * 											읽기(getter) / 쓰기(setter)	 
 * 			
 * 			3) 수정이 가능 / 추가 가능 => 다형석
 * 			   --------   ------ 
 * 				오버라이딩	   오버로딩
 * 			--------------------------------------------------------
 * 			목적 => 유지보수가 쉽게 => 가독성 (리팩토링)=> 변수명,메소드명을 알아보기쉽게 수정 
 * 				  개발 => 개발 / 유지보수
 * 						(1년)  (10~15년)
 * 				  => 업체(개발/유지보수) ==> SI/SM
 * 		
 * 		2. 클래스를 만드는 과정
 * 			1) 클래스 구성요소
 * 				class MainClass
 * 				{
 * 					-------------
 * 					변수 => 1개의 데이터를 저장
 * 					인스턴스 변수
 * 						=> 여러개를 따로 저장해서 사용이 가능
 * 						   ------------- new => 중심
 * 					공유 변수, 클래스 변수 : static => 컴파일러에 의해 자동으로 메모리 생성
 * 												 => 1개만 생성이 가능
 * 													=> 데이터 목록 
 * 					ex)
 * 						String name; => 자동 초기화 : class인 경우 => null
 * 							null => 클래스 객체는 반드시 메모리 주소(주소가 지정이 안된경우 : null)
 * 							A a; => null (a=null)
 * 							  a=new A(); => ***NullPointerException => 대표적오류 => 메모리주소가 없다
 * 						int age; => 0
 * 						String address; => null
 * 						String phone; => null
 * 						double ki; => 0.0
 * 						char c; => '\0'
 * 						boolean b; => false ==> 한번을 메모리에 저장 
 * 						=> 필요한 값으로 변경해서 사용
 * 						----------------------
 * 							초기화 블록 / 생성자
 * 						==> 권장(한줄에 하나씩 선언)
 * 						String name, address, phone; => X
 *  
 * 					***** 데이터(변수) 반드시 외부에서 접근,변경,손실 => 은닉화 
 * 					  private ==> 모든 변수는 private을 사용한다
 * 					--------------------
 * 					생성자 => 접근이 가능 => public
 * 						 => 무조건 생성하는 것이 아니다
 * 						 클래스에는 반드시 생성자가 있어야 한다
 * 						 ---------------------------
 * 						 => 생성자가 없는 경우에는 컴파일러가 자동으로 생성
 * 											------------------
 * 												ㅣ
 * 											매개변수가 없는 생성자(디폴트 생성자)
 * 								class A (멤버클래스)(클래스안에 클래스)
 * 								{
 *									=> 자동 생성 => A(){} 				
 * 								}
 *									
 *								class A
 * 								{
 * 									A(int a){} => 생성자가 존재 => 자동 추가가 안된다
 * 								}
 * 							
 * 								*** 컴파일러가 자동 생성
 * 								1) import : import java.lang.*
 * 											-------------------
 * 												ㅣ String, System, Math
 * 								2) void method()
 * 									{
 * 										return; => 생략하는 경우 => 자동으로 추가
 * 									}
 * 								3) 자바의 모든 클래스는 Object 클래스 상속
 * 												  ---------------
 * 									class A extends Object
 * 											--------------- => Object에서 지원하는 모든 메소드 사용이 가능
 * 								4) 생성자가 없는 경우 => 자동으로 default생성자 추가
 * 								5) 자바의 모든 클래스는 예외처리를 가지고 있다
 * 												 --------
 * 												컴파일시 / 런타임시
 * 														------생략가능
 * 												javac    java
 * 									
 * 						1) 생성자 역할
 * 							= 멤버변수에 대한 초기화 담당
 * 							= 메모리에 저장시 반드시 호출되는 메소드 
 * 								=> 생성자 호출시 new 생성자()
 * 											 -----------
 * 							= 모든 클래스는 생성자가 1개 이상 존재 (없는 경우에는 자동추가)
 * 						
 * 						2) 생성자 특징
 * 							= 클래스명과 동일
 * 							= 리턴형이 없다 (*** void도 리턴형이다)
 * 								class A => int A(), void A() => 일반메소드
 * 							= 생성자는 다른 클래스에서 메모리 할당후에 사용
 * 								=> 기본으로 public
 * 							= 필요시 여러개의 생성자 추가가능
 * 								=> 같은 이름으로 여러개를 만들어서 다른 기능 수행
 * 									---------------------
 * 											ㅣ 오버로딩 (중복함수정의)
 * 											  ------
 * 												1) 조건
 * 													= 메소드명이 동일
 * 													= 매개변수의 갯수나 데이터형이 다름
 * 													= 리턴형은 관계없다	
 * 														int aaa()
 * 														void aaa() => 리턴형은 관계없으므로 같은 메소드임
 * 														void aaa(int a) => 매개변수가 다르므로 다른메소드
 * 														void aaa(int b) => 매개변수 갯수,데이터형이 같으므로 같은 메소드임
 * 													= 같은 클래스에서 제작
 * 													= 생성자, 멤버메소드에서도 적용
 * 															------- println(), println(String s)...
 * 															------- substring(int s), substring(int b,int e)
 * 						3) 생성자 사용처
 * 							= 인스턴스 변수가 명시적인 초기화가 안될때
 * 										 ------------------ 파일읽기, 데이터베이스, 크롤링...
 * 							= 시작과 동시에 처리 
 * 							  ------------- 자동로그인, ID저장등록, 윈도우 화면, 서버동작, 클라이언트=>DB연결...
 * 								=> A a=new A();
 * 									 a.메소드명()
 * 								=> A a;
 * 									 a.메소드명() ==> Error!
 * 					--------------------------------------------------
 * 					초기화 블록 : 생성자 없이 멤버 변수 초기화
 * 					-------- 컴파일러에 의해 자동 호출
 * 					  인스턴스 블록 => 생성자를 주로 사용
 * 					  class A
 * 					  {
 * 					       int a; 1) => 0
 * 	
 * 						   2)
 * 						   {
 * 								a=(int)(Math.random()*100)+1;
 * 						   }
 * 	
 * 						   3)
 * 					       A ()
 * 						   {
 * 								a=(int)(Math.random()*100)+1;
 * 						   }
 * 					  }
 * 					  
 * 					  static 블록 => 자동으로 메모리 할당 => 생성자를 사용하지 않아도 된다
 * 						   class A ()
 * 						   {
 * 								static int a;
 * 								static
 * 								{
 * 									a=100;
 * 								}
 * 						   }
 * 						   A aa=new A(); => aa.a
 * 						   A.a => static 생성자없이 다른클래스에 바로 호출 가능
 * 
 * 						   *** 주의점 
 * 							인스턴스 블록 / static 블록
 * 							class A ()
 * 							{
 * 								int a;
 * 								static int b;
 * 								----------------
 * 								{
 * 									a=100;
 * 									b=200;
 * 								}
 * 								----------------------(O)
 * 								static
 * 								{
 * 									a=1000; ==> Error => static 에서는 인스턴스변수를 사용할 수 없다
 * 													  => 객체생성후에 사용해야한다
 * 									b=2000; // b는 static변수여서 사용가능
 * 								}
 * 								-------------------------
 * 						    }
 * 
 * 							초기값에 대한 호출 순서
 * 							1) 명시적인 초기화 => 우선시(가능하면)
 * 								int a=10;
 * 							2) 초기화 블록
 * 								a=100;
 * 							3) 생성자
 * 								a=200;
 * 							***** 변수
 * 								멤버변수 / static변수 / 지역변수
 * 								-------------------------
 * 									ㅣ 반드시 초기화를 해서 사용
 * 					--------------------
 * 					메소드 => 다른 클래스와 통신 => public
 * 							-------------	
 * 					형식) 
 * 						멤버메소드
 * 						public 리턴형 메소드명(매개변수 목록) => 선언부
 * 						{
 * 							구현부
 * 							=> 인스턴스는 변수, 메소드를 사용
 * 							=> static메소드나 static변수 사용이 가능
 * 						}
 * 						=> 호출 => 객체명.메소드()
 * 							Scanner scan=new Scanner(System.in)
 * 							scan.nextInt()
 * 						static메소드
 * 						public static 리턴형 메소드명(매개변수목록) => 선언부
 * 						{
 * 							구현부
 * 							static메소드나 static변수만 사용이 가능 (인스턴스불가!)
 * 						}
 * 						=> 호출 => 클래스명.메소드()
 * 							Math.random() // => new를 사용하지 않고접근? static!
 * 
 * 						String s="";
 * 						s.substring()
 * 						s.trim()
 * 						s.replace()
 * 						---------------- 멤버메소드
 * 						String.valueOf() ---- static 메소드
 *						----------------------------------------------------
 *						Calendar c=Calendar.getInstance()
 *						--------   ----------------------- new(x) => 추상클래스
 *						----------------------------------------------------
 *						메소드 (접근지정어는 public) => 다른 클래스와 연결
 *							= 리턴형
 *								=> 사용자 요청에 대한 처리결과값 (한개만 사용이 가능)
 *								=> 기본형
 *									정수 => int, long
 *									실수 => double
 *									문자 => char
 *									논리 => boolean
 *								=> 참조형
 *									배열	=> int[]
 *									클래스 => A
 *								=> 리턴형
 *								   ----
 *									{
 *										return 값
 *											  ---일치
 *									}
 *									*** 결과값이 없는 경우 => void를 사용한다
 *										void => return 생략이 가능
 *									*** 리턴형이 있는 경우
 *										반드시 받아서 저장한다
 *										int aaa() => int a=aaa()
 *									*** 메소드를 호출하면 
 *										메소드의 return까지 수행 => 호출된 위치로 돌아온다
 *							= 메소드명
 *								*** 변수 명칭법과 동일 (식별자)
 *								*** 길이의 제한은 없다 => 가급적이면 압축(5~12자)
 *								*** 자바 약속 => 소문자로 시작
 *									=> 소프트웨어 이행 : 가급적 영어로
 *									   -----------
 *										서버는 리눅스 => 차세대 운영체제 (우분투)
 *												  => 우분투 (AWS)
 *										개발 : 윈도우/맥 => 호스팅 : 리눅스
 *										=> 프로젝트 : GIT(원격) (Mac, windows 같이쓰면 경로깨질수있음 가급적 하나로)
 *							= 매개변수		
 *								사용자 요청 값 => 로그인(id,pw,check(id저장))
 *								=> 사용자의 입력, 마우스 클릭, 키보드 이용 => 매개변수로 처리
 *								=> 매개변수의 갯수는 제한이 없다 => 가급적 적게사용
 *														   -----------
 *															3개이상 => 모아서 전송
 *															----------------- 배열,클래스
 *								=> 매개변수는 메모리 할당 => 메소드 호출 시마다 메모리 생성
 *								=> 매개변수는 지역변수의 일종 => 메소드 종료되면 자동으로 사라짐
 *										=> 자동해제(메모리에서 자동처리)
 *										=> 초기값을 주는 경우 메소드 호출시에 초기화를 해준다
 *										ex) 
 *											public void disp(int a)
 *											{
 *											}
 *											disp(10) => 매개변수의 값을 설정한다
 *											-------- 호출
 *								=> ****** 클래스도 데이터형이다!!! ******
 *										 ------------- (형변환) => 상속
 *										
 * 				*** 코드영역
 * 				class 
 * 				{		
 * 					선언만 가능 : 변수 선언, 메소드 선언
 * 								=> 메소드 호출, 연산처리, 제어문 X => 구현 불가능
 * 				} 
 * 				method
 * 				{
 * 					선언(지역변수), 메소드 호출, 연산처리, 제어문 => 구현
 * 					=> 사용자 요청 => 처리 => 결과값 전송
 * 				}
 * 				메소드 => 생성자, 초기화블록 (구현)
 * 				*** 사용자 정의로 만든 메소드, 생성자
 * 						=> **반드시 호출(자동호출없음)
 * 						=> 초기화 블록 => 컴파일러에 의해 한번만 수행
 * 				==> CRUD
 * 					회원가입 / 회원정보 / 수정 / 탈퇴
 * 					=> 면접 : 게시판만들수있나? 얼마나 걸리나?
 * 
 * 			2) 메모리에 저장
 * 			3) 활용 (호출)
 * 		
 * 		3. 클래스의 종류
 * 			1) 일반 클래스
 * 			2) 추상 클래스
 * 			3) 인터페이스
 * 			4) 내부 클래스
 * 				= 멤버클래스, 지역클래스, 익명의 클래스 (쓰레드는 내부클래스써야함)
 * 					class A (멤버클래스)(클래스안에 클래스)
 * 					{
 * 						class B
 * 						{
 * 						}
 * 					}
 * 
 * 					class A (지역클래스)
 * 					{
 * 						public void disp()
 * 						{
 * 							class B
 * 							{
 * 							}
 * 						}
 * 					}
 * 
 * 					class A (익명의 클래스) ===============> 상속없이 오버라이딩
 * 					{
 * 						B b=new B(){
 * 							=> 메소드 추가
 * 							=> 메소드 변경
 * 						}
 * 					}
 * 
 * 			5) 종단 클래스 : 상속을 할 수 없는 클래스
 * 				final class: String, Math....
 * 		
 * 		4. 비정상 종료를 방지하는 프로그램 구현 => 예외처리
 * 		---------------------------------------- 자바기초
 * 				
 */
public class MainClass {
	int a=100;
	static int b=200;
	public static void aaa() {
		MainClass m=new MainClass();
		System.out.println(m.a); // 인스턴스는 불가, 쓰려면 객체생성
		System.out.println(b);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		aaa();
	}

}
