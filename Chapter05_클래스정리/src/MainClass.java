/*
 *  	118page
 *  	프로그램(X) => 웹 개발에 필요한 자바 문법/형식/흐름
 *  								-----------
 *  	브라우저 (웹) <===> 자바 <===> 오라클(웹에 필요한 데이터가 저장)
 *  	----------
 *  	HTML/JS/CSS
 *  	=> 오라클/MySQL(데이터베이스)
 *  	   연결할 수 있는 프로그램이 없다
 *  	=> 클래스의 구조
 *  	1) 형식
 *  		class => 필요한 모든 데이터 모아서 한번에 저장 목적
 *  				 		 ----------
 *  						 	기능/데이터
 *  		** 클래스명 => 식별자 (키워드가 아니다)
 *  				 => 약속 => 대문자로 시작
 *  					---------------- 들여쓰기
 *  				 => 알파벳
 *  				 => _ClassName : 임시클래스(test용)
 *					 => 실무
 *						데이터형 : ~VO, ~DTO 
 *						액션(기능) : ~DAO, ~Manager, ~Service			
 *  									(크롤링,io)  (DAO 여러개묶어서 하나의 서비스제공)
 *  		=> 가독성 => 권장
 *  		class 클래스명
 *  		{
 *				---------------------------
 *  			변수선언 : 멤버변수, 공유변수 ==> 자동 default 초기화
 *  			멤버변수
 *  			------
 *  			  멤버변수 => new를 사용해서 객체 생성시에 따로 저장되는 메모리
 *  					사용시: 객체명.변수명
 *  					저장위치 : Heap => 프로그래머 관리 영역 (주소값은 stack, 실제값은 heap)
 *  							=> 관리 소홍 => GC
 *  							=> GC 대상
 *  							   객체가 null, 사용하지 않는 객체
 *  							=> 멀티미디어 => System.gc();
 *  					사용범위 : 해당 클래스 전체
 *  						    필요시에는 다른 클래스에서도 사용이 가능
 *  					소멸시기 : 프로그램 종료시
 *  				
 *  			  공유변수(static) => 컴파일러에 의해 자동으로 메모리 할당
 *  					사용시: 객체명.변수명
 *  						  클래스명.변수명 => new를 통해 객체생성하지 않아도 가져다쓸수있다는 것 확인
 *  					저장위치 : Method Area(static) => 한개만 저장가능
 *						사용범위 : 해당 클래스 전체
 *  						    필요시에는 다른 클래스에서도 사용이 가능
 *  					소멸시기 : 프로그램 종료시    
 *  				==> 따로 저장 / 한개 저장
 *  					-------
 *  					인스턴스변수(90%)
 *  					=> static : 데이터 목록(게시판,회원 등) 
 *  								--------------------
 *  											ㅣ 접속하는 모든 사람이 공유 (오라클)
 *				---------------------------
 *				생성자	: 반드시 필요로 한다 (생성자가 없는 경우 자동으로 컴파일러가 생성)
 *						  = 멤버변수 초기화
 *						  = 메모리 할당(클래스 저장) => 호출된다
 *						  = 시작과 동시에 처리하는 명령문
 *							(오라클 연결, 네트워크 => 서버구동, 자동로그인)
 *						  = 특징
 *							=> 클래스명이 동일
 *							=> 리턴형이 없다
 *							=> 여러개를 만들 수 있다 (오버로딩) => 중복함수정의
 *						  		** 오버로딩조건
 *						  			1) 한개의 클래스에서 제작
 *						  			2) 메소드명이 동일
 *						  			3) 매개변수의 갯수나 데이터형이 다르다 => 다른 메소드로 인식
 *						  			4) 리턴형은 관계없다
 *								** 다른 클래스에서 객체 생성시에 반드시 => public
 *	
 *				초기화 블록 : 멤버 변수의 초기값 담당
 *				--------
 *					인스턴스 블록 : => 인스턴스 변수, static 변수에 대한 초기화 가능 
 *					static 블록 : => static 변수만 초기화 가능
 *					class ClassName
 *					{
 *						변수 선언;
 *						{
 *							인스턴스 블록
 *						}
 *						
 *						static 변수선언;
 *						{
 *							static 블록
 *						}
 *						--------------- 자동호출, 상속이 불가능
 *						*** 상속의 예외 조건: 생성자				
 *					}
 *					=> 초기화 순서
 *						1) 명시적인 초기화 => 고민
 *						2) 초기화 블록 : static 변수에 대한 초기화
 *						   --------		ㅣ=> static변수는 자동저장이되기때문에 
 *										ㅣ   생성자를 부를필요가없어 초기화블록을 주로씀
 *									    ㅣ	MyBatis => XML(파싱)
 *							=> React(XML,JSON)
 *
 *						3) 생성자 : 인스턴스 변수
 *						A a=new A()
 *							--- ---
 *							new => int malloc(sizeof(A))
 *								  ----------------------- 사용이 많다(연산자 승격)
 *								  => 기본형외의 데이터형은 크기를 알지 못한다 (new를 쓰면 메모리크기를 구해주고 메모리공간을 할당해준다)
 *								  => 리턴형 => 메모리주소
 *									 A a=new A(); => a에 메모리 주소값 저장 
 *							A () => 변수의 초기값을 설정
 *							  *** 생성자는 단독으로 호출불가
 *								  반드시 new 생성자()  형식으로 호출  
 *				---------------------------
 *				= 객체지향 3대특성(캡슐화,다형성,상속/포함)
 *				=> 읽기/쓰기 => getter/setter => 캡슐화
 *				=> 이미 만들어진 메소드를 변경해서 사용 => 오버라이딩 ㅣ
 *				=> 새로운 기능 추가 => 오버로딩					ㅣ=> 다형성		
 *				=> 재사용 => is-a, has-a => 상속 / 포함
 *				멤버메소드 => 클래스 영역에서만 선언/구현
 *					= 사용자 정의 메소드 => 기능, 반복제거, 재사용
 *						= 멤버 메소드 : new를 사용할 때마다 따로 저장
 *							=> 다른 클래스와 통신할 때 주로 사용 (메세지)
 *
 *							[접근지정어] 리턴형 메소드명(매개변수목록) ==> 선언부
 *							{
 *							 	구현부
 *							}
 *							=> 객체명.메소드명
 *							 	scan.nextInt()
 *								String.trim()
 *							=> 리턴형 : 사용자 요청에 대한 결과값
 *										=> 한개만 설정 (여러개일 경우 => 배열/클래스)
 *										=> 상세보기 => 클래스 <배열:목록> => 컬렉션**
 *														   ㅣ		   ㅣ
 *														  고정		  가변
 *										=> 리턴형은 반드시 사용한다
 *										   결과값이 있는 경우 : return
 *										   결과값이 없는 경우 : void => return 생략가능
 *
 *							=> 매개변수 : 사용자가 보내준 값
 *									예) 로그인창 => id,pw
 *									    검색기 => 검색어
 *										클릭 => 번호
 *										-----------
 *										게시판 글쓰기
 *										회원가입
 *										----------- 클래스(3개이상)  
 *										---------------
 *							=> 멤버메소드는 멤버변수, static변수, 지역변수를 사용할 수 있다
 *								static메소드는 멤버변수를 사용할 수 없다(쓰려면 객체생성 해야함(new))
 *							=> 메소드 유형
 *								리턴형 	매개변수
 *								  ==> R(SELECT) (데이터읽기) => DML
 *								 O		  O
 *								 O		  X
 *								------------------- 메소드 자체처리 (CRUD)
 *									==> CUD (INSERT,UPDATE,DELETE)
 *								 X(void)  O
 *								 X(void)  X
 *								------------------- 리턴형이 많을 수 있다 (웹) 
 *														==> eclipse 내에서는 출력이 바로되기때문에 void많이 썼지만
 *															웹에서는 브라우저가 값을 받아서 출력하기때문에 대부분 return이있다
 *							=> 사용법
 *									class A
 *									{
 *										int a=10;
 *										void aaa()
 *										{
 *											--- 구현
 *											return;
 *										}
 *										int bbb()
 *										{
 *											--- 구현
 *											return a; => 데이터형이 동일
 *										}
 *									}
 *								1) 메모리 저장
 *									A aa=new A();		. => 주소접근연산자
 *									---aa---
 *									  0x100		
 *									--------	--0x100--
 *
 *												----a----
 *													10	==> aa.a
 *												---------
 *												aaa() ==> aa.aaa()
 *												---------
 *												bbb() ==> aa.bbb()
 *												---------
 *						=> 리턴형이 있는 경우
 *							int a=aa.bbb();
 *							---		 ------
 *						=> 리턴형이 없는 경우
 *							aa.aaa();
 *						
 *						= 공유 메소드 => static
 *							 형식)
 *							 	[접근지정어] static 리턴형 메소드명(매개변수목록)
 *							 	{ 
 *
 *							 	}
 *							 	static [접근지정어] 리턴형 메소드명(매개변수목록)
 *							 	{
 *
 *							 	}
 *							 => static 메소드는 static변수 사용이 자유롭다
 *							 => static 메소드 안에서는 인스턴스변수, 메소드는 반드시 객체생성후 사용해야한다
 *							
 *						= 상속을 방지 => final (종단 메소드)
 *						= 선언만 한다 => 구현은 프로그램에 맞게 => abstract
 *						  버튼클릭 => 설계 (추상클래스/인터페이스) => 클릭하는 설계만 기능은 프로그램에 맞게
 *												-------
 *					= 라이브러리 메소드 (9장)
 *					  -------
 *						라이브러리  VS  프레임워크
 *						-------	    --------
 *						완제품(jar)	레고(java) => 전자정부 프레임워크, ANY	
 *				---------------------------
 *  		}
 *  
 *  	2) 메모리 저장
 *  		122page ==>
 *  		객체생성
 *  		--- 기본형 => 변수
 *  		--- 클래스 => 객체(메모리공간) (쉽게생각하면 우리가만든 클래스의 변수가 객체이다)
 *  		--- 하둡 : 만든사람 아들의 장난감 이름
 *  		--- 클라우드 : 구글의 사장(네트워크 => 표현 구름)	
 *  		new 생성자()
 *  		class A(){
 *  		}
 *  		
 *  		new A() 	
 *  		------- 메모리 주소 리턴 => 필요한 경우에는 주소를 저장
 *  		A a=new A() => 주소를 a에 저장
 *  		===> 123page => 객체사용
 *  			A a=new A();
 *  			a.변수,메소드 // 저장하고 부르기
 *  
 *  			A a;
 *  			a=new A();  // 선언만하고 생성
 *  
 *  	3) 호출
 *  	
 *  
 */
class A
{
	/*int a=10;
	static int b=20; // static => 선언과 동시에 메모리에 저장
	void aaa() {
		System.out.println(a);
		System.out.println(b);
	}
	
	static void bbb() {
		A aa=new A();
		System.out.println(aa.a); // static메소드에서는 멤버변수를 사용할수없어서 앞에 객체생성을 하고 불러야 한다
		System.out.println(b);
	}
}*/
	void display() {
		System.out.println("A.display call...");
	}
	
	void aaa() {
		System.out.println("A.aaa call...");
	}
}
public class MainClass {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// main이 static 이기때문에 인스턴스 a를 불러오기위해 A객체생성을 한다
		/*A aa=new A(); // aa라는 메모리에 a변수
		System.out.println(aa.a);
		System.out.println(aa.b);
		System.out.println(A.b); // 클래스.변수명 (static만 가능)*/
		new A().display(); // ==> 객체를 저장하지 않고 생성만하는 것 가능
		new A().aaa(); // 의미없이 2개의 객체를 생성함 => 메모리 공간 1개를 생성해서 둘다쓸수있음
		A a=new A(); // 메모리공간1개 만들고 멤버메소드 둘다 호출가능
		a.display();
		a.aaa();
	}

}
